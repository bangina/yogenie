import React, { useEffect, useMemo, useState } from "react";
import { KeyboardAvoidingView, StyleSheet, Text, TextInput, TouchableOpacity, View } from "react-native";
import { globalStyles } from "../../styles";
import ChatBubble from "../components/ChatBubble";
import ChatInputSection from "../components/ChatInputSection";
import { primaryColor } from "./LoginScreen";
const enum QuestionType {
  "yesNo" = "yes-no",
  "singleChoice" = "single-choice",
  "multipleChoice" = "multiple-choice",
  "finish" = "finish",
  "textInput" = "textInput",
}
export const GenieQuestionList = {
  start: {
    label: { text: `Îãò Ïò§Îäò ÏöîÍ∞Ä ÌñàÏñ¥Ïöî?`, variable: "username" },
    questionType: QuestionType.yesNo,
    nextMap: {
      yes: "1-1",
      no: "end",
    },
    options: [
      { text: "ÎÑ§", value: "yes" },
      { text: "ÏïÑÎãàÏöî", value: "no" },
    ],
    disabled: false,
  },
  "1-1": {
    pretext: ["Ï¢ãÏïÑÏöî!", "ÏàòÍ≥†ÌñàÏñ¥Ïöî."],
    label: { text: `ÏöîÍ∞Ä ÌïòÎ©¥ÏÑú Í∏∞Î∂ÑÏùÄ Ïñ¥Îï†Ïñ¥Ïöî?` },
    questionType: QuestionType.singleChoice,
    nextMap: {
      fixed: "2-1",
    },
    options: [
      { text: "Í∏∞Î∂Ñ Ï¢ãÏùÄ", value: "1-1/1" },
      { text: "ÌñâÎ≥µÌïú", value: "1-1/2" },
      { text: "Í±¥Í∞ïÌïú", value: "1-1/3" },
      { text: "ÌôúÍ∏∞Ï∞¨", value: "1-1/4" },
      { text: "Í∞êÎèôÎ∞õÏùÄ", value: "1-1/5" },
      { text: "Ìù•Î∂ÑÎêú", value: "1-1/6" },
      { text: "Ìé∏ÏïàÌïú", value: "1-1/7" },
      { text: "ÏÉÅÏæåÌïú", value: "1-1/8" },
    ],
    disabled: false,
  },
  "2-1": {
    pretext: ["Í∑∏Îû¨Íµ∞Ïöî üßò"],
    label: { text: `Ïò§Îäò ÌûòÎì§Í±∞ÎÇò Î∂àÌé∏Ìïú Î∂ÄÎ∂ÑÏùÄ ÏóÜÏóàÏñ¥Ïöî?` },
    questionType: QuestionType.yesNo,
    options: [
      { text: "ÏûàÏóàÏñ¥Ïöîü•∫", value: "yes" },
      { text: "ÏóÜÏóàÏñ¥Ïöî", value: "no" },
    ],
    nextMap: {
      yes: "2-2",
      no: "3-1",
    },
    disabled: false,
  },
  "2-2": {
    label: { text: `Ïñ¥Îñ§ Ï†êÏù¥ÏóàÏñ¥Ïöî?` },
    questionType: QuestionType.textInput,
    nextMap: {
      fixed: "4-1",
    },
    disabled: false,
  },
  "3-1": {
    pretext: ["ÏàúÌÉÑÌïú ÎÇ†Ïù¥ÏóàÎÇòÎ≥¥Íµ∞Ïöî!"],
    label: { text: `Ïò§Îäò ÌäπÎ≥ÑÌûà Îì† ÏÉùÍ∞ÅÏù¥ ÏûàÏñ¥Ïöî?` },
    questionType: QuestionType.textInput,
    nextMap: {
      fixed: "2-1",
    },
    nextText: "",
    disabled: false,
  },
  "4-1": {
    label: { text: `Îã§ÏùåÏóê ÏöîÍ∞ÄÌï† Îïå ÌäπÎ≥ÑÌûà ÏßëÏ§ëÌïòÍ≥† Ïã∂ÏùÄ Î∂ÄÎ∂ÑÏù¥ ÏûàÏúºÎ©¥ ÎßêÌï¥Ï£ºÏÑ∏Ïöî.` },
    questionType: QuestionType.textInput,
    nextMap: {
      fixed: "end",
    },
    nextText: "Ï¢ãÏïÑÏöî. Í∏∞ÏñµÌï¥ÎëòÍ≤åÏöî.",
    disabled: false,
  },
  end: {
    label: { text: `Í∑∏Îüº Í≥ß Îòê ÎßåÎÇòÏöî!` },
    questionType: QuestionType.finish,
    disabled: false,
  },
};
const goodBye = "ÎÑ§ Îã§ÏùåÏóê Îòê Î¥êÏöî üßò";
const AddLogScreen = ({ navigation }): JSX.Element => {
  const [chatLogList, setChatLogList] = useState<any>([]); // UI Î†åÎçîÎßÅÏö©
  const [currQIdx, setCurrQIdx] = useState<any>(); //'1-1'
  const [value, setValue] = useState("");
  const clearList = () => {
    setChatLogList([]);
    storeGenieAnswer(GenieQuestionList["start"]);
    setCurrQIdx("start");
    setValue("");
  };
  // Ïú†Ï†ÄÍ∞Ä enter ÎàÑÎ•¥Î©¥ Îã§Ïùå ÏßàÎ¨∏ÏúºÎ°ú ÎÑòÏñ¥Í∞ÄÎäî Ìï®Ïàò
  const storeUserAnswer = (selectedObj, qKey) => {
    // ÌòÑÏû¨ ÏßàÎ¨∏ Í∞ùÏ≤¥ Ï†ÑÏ≤¥, user value ÎëêÍ∞ú ÎÑòÍ≤®Ï§å
    // 1. Ïú†Ï†ÄÍ∞Ä ÏÑ†ÌÉùÌïú ÎãµÎ≥ÄÏùÑ chatLogListÏóê Ï∂îÍ∞Ä
    // textinput Ïù¥Î©¥ Í∑∏ÎåÄÎ°ú Ï†ÄÏû•, ÌÇ§Í∞íÏù¥Î©¥
    setChatLogList((prevList: any) => [...prevList, { label: { text: selectedObj.text }, userType: "user" }]);
    // 2. firebaseÏóê Ïú†Ï†ÄÍ∞Ä ÏÑ†ÌÉùÌïú ÎãµÎ≥Ä Ï∂îÍ∞ÄÌïòÏó¨ Ï†ÄÏû•
    // firebase.database().ref('chatLogList').push({label: {text: value}, userType: "user"});
    // 3. selectedObjÏùò ÌÇ§Í∞íÏùÑ Í∞ÄÏ†∏ÏôÄÏÑú, Í∑∏ ÌÇ§Í∞íÏóê Ìï¥ÎãπÌïòÎäî Îã§Ïùå ÏßàÎ¨∏ÏùÑ chatLogListÏóê Ï∂îÍ∞Ä(ÏßÄÎãà)
    const nextQItemKey = GenieQuestionList[qKey]?.nextMap.hasOwnProperty("fixed") ? GenieQuestionList[qKey]?.nextMap["fixed"] : GenieQuestionList[qKey]?.nextMap[selectedObj.value];
    console.log(nextQItemKey, "nextQItemKey");
    if (nextQItemKey) {
      setCurrQIdx(nextQItemKey);
      storeGenieAnswer(GenieQuestionList[nextQItemKey]);
    }
    setValue(""); //input Ï¥àÍ∏∞Ìôî
  };
  const storeGenieAnswer = (currQItem) => {
    // 1. Îã§Ïùå ÏßàÎ¨∏ÏùÑ chatLogListÏóê Ï∂îÍ∞Ä(ÏßÄÎãà)
    setChatLogList((prevList: any) => [...prevList, { label: { text: currQItem?.label?.text }, userType: "genie" }]);
  };
  const handleFinish = (userInput) => {
    setChatLogList((prevList: any) => [...prevList, { label: { text: userInput }, userType: "user" }]);
    setCurrQIdx("finish");
    navigation.navigate("Home");
  };
  const currentQItem = useMemo(() => GenieQuestionList[currQIdx], [currQIdx]);
  useEffect(() => {
    // firebaseÏóêÏÑú ÏßàÎ¨∏Î¶¨Ïä§Ìä∏ Í∞ÄÏ†∏Ïò§Í∏∞
    // 1. Ï≤òÏùå ÏßàÎ¨∏ÏùÑ chatLogListÏóê Ï∂îÍ∞Ä(ÏßÄÎãà)
    if (chatLogList?.length === 0) {
      clearList();
    }
  }, []);
  const today = new Date();
  console.log(chatLogList, "chatLogList");
  console.log(currentQItem, "currentQItem");
  console.log(currQIdx, "currQIdx");

  return (
    <KeyboardAvoidingView style={styles.container} behavior='padding'>
      <Text style={{ color: "grey" }}>
        -{today.toDateString()}, {currQIdx}-
      </Text>
      <View style={styles.chatContainer}>
        {chatLogList?.map((item, idx) => (
          <ChatBubble chatItem={item} key={idx + "chat_buble"} inputComp={undefined} userType={item.userType} />
        ))}
        {/* {Object.entries(GenieQuestionList).map(([key, value]) => (
          <ChatBubble key={key + "chat_buble"} chatItem={value} />
        ))} */}
      </View>
      {/*  */}
      {currentQItem?.questionType === QuestionType.yesNo && (
        <View style={styles.optionCntr}>
          {currentQItem?.options?.map((optionItem, idx) => (
            <TouchableOpacity
              key={optionItem?.value + "option"}
              onPress={() => storeUserAnswer(optionItem, currQIdx)}
              style={[styles.yesNoItem, idx === 0 ? globalStyles.outlinedBtn : globalStyles.primaryBtn]}
            >
              <Text style={[styles.optionItemText, idx === 0 ? globalStyles.colorPrimary : globalStyles.colorWhite]}>{optionItem?.text}</Text>
            </TouchableOpacity>
          ))}
        </View>
      )}
      {currentQItem?.questionType === QuestionType.singleChoice && (
        <View style={styles.optionCntr}>
          {currentQItem?.options?.map((optionItem) => (
            <TouchableOpacity key={optionItem?.value + "option"} onPress={() => storeUserAnswer(optionItem, currQIdx)} style={styles.optionItem}>
              <Text style={styles.optionItemText}>{optionItem?.text}</Text>
            </TouchableOpacity>
          ))}
        </View>
      )}
      {currentQItem?.questionType === QuestionType.textInput && (
        <View style={styles.chatInputCntr}>
          <TextInput placeholder='type here...' value={value} onChangeText={(text) => setValue(text)} autoCapitalize={"none"} style={styles.input} />
          <TouchableOpacity style={styles.button} onPress={() => storeUserAnswer({ text: value, value }, currQIdx)}>
            <Text style={styles.buttonText}>Ï†ÑÏÜ°</Text>
          </TouchableOpacity>
        </View>
      )}
      {currentQItem?.questionType === QuestionType.finish && (
        <View style={styles.chatInputCntr}>
          <TouchableOpacity style={styles.button} onPress={() => handleFinish(goodBye)}>
            <Text style={styles.buttonText}>{goodBye}</Text>
          </TouchableOpacity>
        </View>
      )}

      <View style={styles.buttonContainer}>
        <TouchableOpacity style={styles.button} onPress={() => clearList()}>
          <Text style={styles.buttonText}>Ï¥àÍ∏∞Ìôî</Text>
        </TouchableOpacity>
      </View>
    </KeyboardAvoidingView>
  );
};

export default AddLogScreen;

const styles = StyleSheet.create({
  chatContainer: {
    display: "flex",
    flexDirection: "column",
    justifyContent: "flex-start",
    width: "100%",
    borderColor: "#eee",
    borderWidth: 1,
    flexGrow: 1,
    paddingHorizontal: 10,
    paddingVertical: 10,
    backgroundColor: "#fff",
  },
  container: {
    flex: 1,
    alignItems: "center",
    justifyContent: "center",
    marginTop: 100,
  },
  buttonContainer: {
    height: 100,
    display: "flex",
    flexDirection: "row",
    alignItems: "center",
  },
  button: {
    backgroundColor: primaryColor,
    padding: 12,
    borderRadius: 10,
    alignItems: "center",
  },
  buttonText: {
    color: "#fff",
  },
  input: {
    paddingHorizontal: 15,
    paddingVertical: 10,
    borderRadius: 10,
    width: "100%",
    flex: 1,
    backgroundColor: "#fff",
  },
  chatInputCntr: {
    display: "flex",
    flexDirection: "row",
    borderColor: "red",
    backgroundColor: "#fff",
    color: "red",
  },
  optionCntr: {
    display: "flex",
    flexDirection: "row",
    flexWrap: "wrap",
    backgroundColor: "#fff",
    width: "100%",
    justifyContent: "center",
    padding: 10,
  },
  yesNoItem: {
    paddingHorizontal: 8,
    paddingVertical: 8,
    borderRadius: 100,
    marginHorizontal: 4,
    alignItems: "center",
    flex: 1,
  },
  optionItem: {
    backgroundColor: primaryColor,
    paddingHorizontal: 8,
    paddingVertical: 8,
    borderRadius: 100,
    marginHorizontal: 4,
    alignItems: "center",
  },
  optionItemText: { fontSize: 12 },
});
